Namaste React :- 

==> Ep - 01 :-

	-> React is most popular js library to build large scale application in this world.
	-> VS Code have a Emmet its basically generate code for you.
	-> React is developed by Meta developer.
	
	=> CDN : Content Delivery Network is a network of interconnected servers that speeds up webpage loading for data-heavy application.
	=> Crossorigin : Crossorigin attribute is used when a script on one domain is trying to fetch or interact with resources from another domain.

	-> in react React.createElement() takes 3 parameter - 1. Name of tag you create, 2. object, 3. child.
	-> in object parameter you can pass attribute like name of id or class of element you should created.
	-> in third parameter you can create a child element or siblings of child elements.
	-> Example : const heading = React.createElement('h1', {id: "heading", class: "heading"}, 'Hello from React');
	-> in react ReactDOM.createRoot() to create root element.
	-> Example : const root = ReactDOM.createRoot(document.getElementById('root'))

==> Ep - 02 :-

	Npm : Node Package Manager (npmjs.com)
		-> Npm is work as a node package manager and it has package manager.
		-> Npm is a standard repositiry it has all the packages.
		-> Any pacakge you will use in our project you will used npm.
		-> Npm has all the packages, all the utilities.
		-> If you need to insatll any command you will to use npm command.
		=> package.json - is configuration of npm.
		-> package.json file keep the track version of pacakge which is installed.
		=> package.lock.json - file keep the track of exact version of every package which is installed.
		=> node_modules - node_modules contains all the code that be fetch from npm.
		-> node_modules contains all data to project or dependnucy need.
		-> Our project depend on some package and package depend on some other dependuncy & npm is manage all pacakge & dependuncy.
		-> When are two types of dependuncy in our app 1. dev dependuncy and 2. normal dependuncy
			1. dev dependuncy - it is generally required for in development phase
			2. normal dependnucy - it is used in production also
		=> Caret sign (^) : to put ^ sign below the version of package this sign automatically upgrade package version.
		=> Tilde sign (~) : to put ~ sign below the version of pacakge this sign install the major version of package.
		=> Transitive dependuncy - one dependnucy they have own dependnucy they have own dependnucy...
		-> If you have your package.json or pacakge.lock.json you create all your node_modules.
		-> npx parcel index.html - currentlly parcel is executing.
		-> just like we have npm similarlly we have something known as npx.
		-> npx means executing a package.
		-> import React from 'react' - react is basically reffers to the react inside of node_modules.
	
==> Ep - 03 :-

	-> npm start = npm run start
	-> React element is similar to DOM element.
	-> React element is at end of the day it is a object and when we render this element into the dom then we becomes html element. 
	-> JSX is not html in js.
	-> JSX is looks like html or xml.
	-> JSX is a syntax.
	-> Babel is converting JSX to React.createElement and React.createElement render into html element.
	=> Components : Everything in react is a components. 
		-> There are two types of components - 1. Classbased components 2. Functional components.
		-> Classbased components : 
		-> Functional components : Functional components is a normal js function which returns some piece of jsx.
	-> In react you can write any js code inside of {}.
	-> We can reuse components.

==> Ep - 04 :-

	=> Props : Props is short form of Properties.
	-> Using props to pass data to components.
	-> Props are normal argument.
	=> Config-driven UI :It is a technique that allows you to create dynamic and customizable UIs without hard coding them. 
	-> data?.data = it's known as optional chaining.
	-> Whenever you are doing mapping and looping you write key of element.
	-> You dont't have an unique key you write index as key but it's not recommended. 

==> Ep - 05 :- 

	-> React is use js in behind.
	-> In react, best practice is to make saparete file of every components.
	-> To use component in any other components to export the component.
	-> Two ways to export or import component
		1. defult import or export
		2. Named import or export
	-> In defult export, you write export defult component name.
	-> In defult import, you write import component name from 'path'.
	-> Secound way to import or export is known as named import or export.
	-> In named export, you write export var nama.
	-> In named import, you write import {var name} from 'path'.
	-> You need to export multiple things in file you can use named export or import.
	-> You can write a common things in a utils folder.
	-> Why react is fast because react do fast dom-manipulation.
	=> React Hooks :- 
		-> React Hooks is a normal javascript function.
		-> useState() and useEffect() are a very important hooks in react.
		1. useState() : 
			-> useState() generates super powerfull state variables in react.
			-> You have to import useState from your react.
			-> You have to import useState like a named import.
			-> useState maintains the state of your component.
			-> useState allows you to modify your states.
			-> Whenever state variable is update react will re-render the component.
			-> useState will update your UI very quickly.
	-> React uses Reconciliation Algoritham(come in React 16) and Reconciliation Algoritham also know as React Fiber.
	-> React creates virtual DOM.
	-> Actual DOM is are the tags. 
	-> virtual DOM is representation of actual DOM.
	-> virtual DOM is object representation of JSX.
	-> React virtual DOM is a object.
	-> Diff Algoritham : it finds difference between pre virtual DOM & updated virtual DOM.

==> Ep - 06 :-

	=> Monolith Architecture : 
	=> Microservices Architecture : In this architecture we have different service for different activity.
	-> Backend service, UI service, Authentication service, DB service, Notification service etc... all are microservices.
	-> For each and every service we had a different project and this is known as saparation of consults and it follows single responsibility principle.
	-> All services have a own port all services run on the own port.
	-> React fast because its render cycle is very fast.
	=> useEffect() :
		-> useEffect is a function it takes two arguments first argument is a callback function and secound argument is a dependnucy array.
		-> When the body components is render as soon as rendering process is finished it will called callback function to passed in useEffect.
		-> If you have to do something after rendering the components you write inside the useEffect.
	-> fetch will return a promise.
	-> To perform rendering based on conditions is known as conditional rendering.
	-> We have use ternary operator to handle this condition.
	-> Whenever state variables update, react triggers a Reconciliation cycle (re-render the component).
	-> Reconciliation cycle means react finding diff between older virtual dom or updated virtual dom.

==> Ep - 07 :-

	-> Every time my component is render by useEffect called.	
	-> If no dependnucy array useEffect is called on every render.
	-> If dependnucy array is empty [] useEffect is called on initial render (just once).
	-> Cannot create a useState variable outside of body.
	-> Never create your useState inside of conditions and looping statments.
	=> Router :
		-> Using router you should navigate one page to other page.
		-> createBrowserRouter - to create router for our app
		-> RouterProvider - to provide router configuration of our app
		-> useRouteError - you can get more information about the error
		-> outlet - it will fill children according to path inside of parent
		-> outlet will render child element in the parent element
		-> Link - react-router-dom gives special component Link but behind the seen Link uses a anchor tag.
		-> Link - Link does not refresh your page.
		-> Page does not refresh because using react we can create single page application.

==> Ep - 08 :-

	=> Classbased Components - 
		-> Classbased component is a older ways to create component in react.
		-> Classbased component is a normal js class.
		-> Classbased component is a class it extends with React.Component and it has render method that return some piece of jsx.
		-> React.Component is a class which is gives by a React.
		-> To update your state variable using of this.setState() function.
		-> The first thing is Whenever class load a constructor is called.
		-> In Classbased component first constructor called and after it render method called.
		-> First parent constructor call after it parent render method call after it child constructor call after it child render method 
		   call this is life cycle of Classbased component.
		-> componentDidMount() : if you have componentDidMount() in only the child class component the life cycle is, 
		    child constructor call -> child render() call -> componentDidMount() call.
		-> If you have componentDidMount() in both parent or child the life cycle like this,
			parent constructor call -> parent render() call -> child constructor call -> child render() call -> child componentDidMount() call -> parent componentDidMount() call.
		-> Life cycle has a 2 phase - 
				1. Render Phase : Render phase has a constructor & render.
				2. Commit Phase : In this phase actually updates the DOM and then componentDidMount.
		-> componentDidUpdate : This method is updating the DOM in response to prop or state changes.
		-> componentWillUnmount : React will call it before your component is removed (unmounted) from the screen
		-> Mount : Component will shown in the web page and it process of create instace of component & insert into DOM.
		-> Unmount : Component will disapear in the web page.
		-> After one render componentDidMount will call and after every subsequent render componentDidUpdate will call.
		-> You will write return in useEffect() it will work after the removed component from the screen & it will clear all intervals.
	-> Invoking Functional Component that means mounting or loading the functional components into the web page.
	-> Never update your state variables directly.

==> Ep - 09 :- 

	=> Single Responsibility Principle : You have a single class or you have single function or you have a single identity that should have a single responsibility.
	=> Modularity : You break down of your code in different different module.  
	=> Custom Hooks : You can create your own hooks.
	-> In custom hooks you write encapsulate statefull logic, reuse in multiple component.
	-> If you create your custom hooks you must write file name with use keyword.
	-> For Example, useOnlineStatus.js
	=> Code Spliting : To split your code in small chunk.
	=> Lazy Loading : React allows you to split your code into smaller chunks, loading only the code that is needed for a particular part of your 
		application when it is actually required.
	-> when you load your component using lazy().
	-> In lazy() you can import or pass your component full path.
	-> Lazy loading is split your code into multiple JS bundles.
	-> Example : const Grocery = lazy(() => { import("./components/Grocery") })
	-> You will write Suspense() with lazy();
	-> element: <Suspense fallback={<h1>Loading...</h1>}><Grocery /></Suspense>

==> Ep - 10 :-

	-> To many ways to style your component like : Normal CSS, Saas, Scss, Muterial UI, Chakra UI, Bootstrap, Ant-Design, Tailwind Css.
	=> Tailwind Css : is a framework of css.
	-> To install - npm i -D tailwindcss postcss 
	-> npx tailwindcss init
	-> tailwind.config.js is configuration of tailwind and postcssrc is configuration of css.

==> Ep - 11 :-

	=> Higher Order Component (HOC) : HOC is a function that takes a component and return a component.
	-> HOC return component and that component are enhanced version of inputed component.
	=> useContext() : You can pass data into other component.
	-> useContext handle state and every time state variable change modify the context data.
	-> create useContext using this createContext().
	-> You can write data in useContext file in json format.
	-> example - const const UserContext = createContext({
					loggedInUser: "Bhargav",
				});
				export default UserContext;
	-> You can use your useContext in 2 ways : 
		1. Using Hooks - const {loggedInUser} = useContext(UserContext);
		-> You can pass your useContext name inside of useContext().
		2. consumer - 	<UserContext.Consumer>
							{({loggedInUser}) => <h1>{loggedInUser}</h1>}
						</UserContext.Consumer>
		-> Classbased component does not have a hooks to use consumer to access useContext data.
		-> consumer takes a callback function and this function gives you a access of context.
		-> You can use consumer a multiple time.
	-> I will pass new context information in my app using context Provider.
	-> You can also update your useContext value using context Provider.
	-> You may also create nested context Provider.

==> Ep - 12 :-

	=> Redux - Redux is used to handle multiple states.
	-> Install CMD - npm i @reduxjs/toolkit or npm i react-redux
	-> Redux is not a mandetory.
	-> Redux and React are saparete libraries.
	-> Redux offering easy debugging.
	=> Zustand - is a another library to handle states.
	=> useSelector - it reads data from redux store slice.
	=> useDispatch - it dispatch data from redux store slice to component.
	=> Reducers - it is a combination of multiple small function.
	=> Reducer - it is a big object that contains small reducers.
	-> In vanilla redux (older redux) don't have to Mutate state.
	-> In vanilla redux we can not modify state directly.
	-> Mutate state means state updates itself automatically.
	-> Redux Toolkit have to mutate the state.
	-> Redux Toolkit using something known as immer.
	-> immer library finding the difference between the original state the mutate state and the gives you back a new state which is 
		immutable state.
	-> Redux DevTool Chrome Extension

==> Ep - 13 :-

	=> Testing - three types of Testing developer can do.
		1. Unit Testing - 
			-> You test your react component in isolation.
			-> You testing of small component (unit) of your react application not whole application.
		2. Integration Testing - 
			-> There are multiple component and there are talking to each other and they develope the flow and test the application.
			-> In Integration testing multiple component involve and test the application.
		3. End to End Testing (E2E) - 
			-> In this type of testing test application from user landing on the site to user leave the site.
			-> It test the flow of user can do on site.
			-> E2E testing needs of multiple types of tools to test your whole site flow.
		-> React Testing library are used to write test cases.
		-> React Testing library uses Jest.
		-> Jest is javascript testing library.
		-> We need Jest and React Testing Library both to test our application.
		-> install command : npm install -D @testing-library/react
		-> In above command -D means Dev Dependuncy.
		-> Jest install command : npm i -D jest
		-> We are need to install babel dependnucy because use babel in Testing.
		-> install command : npm install --save-dev babel-jest @babel/core @babel/preset-env
		-> Command for Jest Configuration : npx jest --init
		-> Jsdom - It is not a browser but it's like a browser which will give you features of browser.
		-> If you're using Jest 28 or later, jest-environment-jsdom package now must be installed separately.
		-> command :  npm i -D jest-environment-jsdom	
	-> which file you are test to this file create inside of __tests__ folder and give the nane of file like filename.test.js
	-> Babel are transpailar that convert your code for one form to another form.
	-> @babel/preset-react testing library are helping to convert code for JSX to HTML to read properly.
	-> You write your test cases inside of test().
	-> test() takes two arguments 1. description of tast case  2.callback function.
	-> Inside of callback function you write your test case.
	-> You have multiple test cases you must write your test case inside of describe().
	-> describe() also takes two arguments 1. description of tast case  2.callback function.
	-> Inside of callback function you write your multiple test cases.
	-> You also write nested describe().
	-> You write your test cases inside of it().
	-> it() is are similar to describe().
	-> it() is just aliace of describe().
	-> In package.json, "watch-test" : "jest --watch"
	-> Above help to it automatically test your test cases.
	-> You want to do something before all the test cases you must write inside the beforeAll(()=>{}).
	-> You want to do something before each any test case you must write inside the beforeEach(()=>{}).
	-> similarlly you want to do something after all the test cases you must write inside the afterAll(()=>{}).
	-> similarlly you want to do something after each any test case you must write inside the afterEach(()=>{}).

-------------------------------------------------------------------------------------------------------------------------------------------------
API : API stand for Application Programing Interface.
	React used to call api.
	api must be create inside a json.
	json file axtension .json.
	
	example: 
		const user = 
			[
				{
					"id":101,
					"name":"bhargav",
				}
			]

	json-server install cmd : npm i -g json-server
	json-server run cmd : npm run json-server
	packge.json file : "json-server": "json-server --watch db.json --port=8000"

-------------------------------------------------------------------------------------------------------------------------------------------------

OBJECT : object is entity used to stored a data inside of {"property":"value"}
	object will b declare or assign 3 types
	1. object as literals
	=> Example,  const emp = '{"name":"bhargav"}'
			console.log(emp)
	2. object as New keyword
	=> Example, const emp = new Object()
			const res = {"name":"bhargav"}
			console.log(res)
	3. object declared as constructor this keyword
	=> Example, function emp(id,name,age){
   				 this.id = 1001,
    				this.name = "bhargav",
    				this.age = 20
 			 }
  			const emp1 = new emp(1001,"bhargav",20);
  			console.log(emp1)
